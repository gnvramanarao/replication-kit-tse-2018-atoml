<?xml version="1.0" encoding="UTF-8"?><testrun name="Exec All Weka Tests" project="atoml" tests="2310" started="2310" failures="234" errors="29" ignored="0">
  <testsuite name="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="22271.182">
    <testcase name="test_Bias" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="3.122"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="13.31"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.938"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="76.076"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.909"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.258"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="4.603"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.444"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="21600.019">
      <error>org.junit.runners.model.TestTimedOutException: test timed out after 21600000 milliseconds&#13;
	at weka.classifiers.lazy.kstar.KStarCache$CacheTable.containsKey(KStarCache.java:134)&#13;
	at weka.classifiers.lazy.kstar.KStarCache.getCacheValues(KStarCache.java:80)&#13;
	at weka.classifiers.lazy.kstar.KStarNominalAttribute.transProb(KStarNominalAttribute.java:154)&#13;
	at weka.classifiers.lazy.KStar.attrTransProb(KStar.java:370)&#13;
	at weka.classifiers.lazy.KStar.instanceTransformationProbability(KStar.java:335)&#13;
	at weka.classifiers.lazy.KStar.distributionForInstance(KStar.java:287)&#13;
	at weka.classifiers.AbstractClassifier.classifyInstance(AbstractClassifier.java:173)&#13;
	at weka.classifiers.lazy.KStar_Default_Weka_AtomlTest.test_ManyCategories(KStar_Default_Weka_AtomlTest.java:2821)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.427"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.95"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.316"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.322"/>
    <testcase name="test_OneClass" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.136"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.305"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="9.8"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="14.164"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.35"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.008"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="81.011"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.01"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Outlier" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.336"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.253"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.149"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.298"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="9.662"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="14.227"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.296"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.008"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="80.938"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.067"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.313"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="9.811"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="14.098"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.306"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.008"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="80.878"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.005"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.542"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.296"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="9.776"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="14.36"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.286"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.003"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="82.609"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.116"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.341"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="10.961"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="14.907"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.344"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.104"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="83.316"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="2.029"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Split" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.575"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.257"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.273"/>
    <testcase name="test_Uniform" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.134"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="1.962"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.316"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.lazy.KStar_Default_Weka_AtomlTest" time="0.322"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="71.977">
    <testcase name="test_Bias" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.618"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.732"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.29"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.76"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.21"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.315"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.138"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="14.074">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.convertInstance(NominalToBinary.java:581)&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.input(NominalToBinary.java:184)&#13;
	at weka.filters.Filter.useFilter(Filter.java:702)&#13;
	at weka.classifiers.functions.KernelLogisticRegression.buildClassifier(KernelLogisticRegression.java:738)&#13;
	at weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest.test_ManyCategories(KernelLogisticRegression_Default_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.028">
      <error>java.lang.Exception: A NaN value was generated while standardizing attribute feature_0&#13;
	at weka.filters.unsupervised.attribute.Standardize.convertInstance(Standardize.java:247)&#13;
	at weka.filters.unsupervised.attribute.Standardize.batchFinished(Standardize.java:169)&#13;
	at weka.filters.Filter.useFilter(Filter.java:704)&#13;
	at weka.classifiers.functions.KernelLogisticRegression.buildClassifier(KernelLogisticRegression.java:741)&#13;
	at weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest.test_MaxDouble(KernelLogisticRegression_Default_Weka_AtomlTest.java:2411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.525"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="5.539"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.458"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.481"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.655"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.155"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.439"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="4.591"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.417"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.464"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.552"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.151"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.43"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="4.529"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.413"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.465"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.184"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.688"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.428"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="4.525"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.412"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.464"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.585"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.455"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="4.563"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.413"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.451"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.158"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="3.59"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.082"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.084"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.KernelLogisticRegression_Default_Weka_AtomlTest" time="0.062"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="48.418">
    <testcase name="test_Bias" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.3"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.645">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Const_IONOSPHERE(MLPClassifier_Default_Weka_AtomlTest.java:152)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.069">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Const_RANDNUM(MLPClassifier_Default_Weka_AtomlTest.java:64)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.521">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Const_UNBALANCE(MLPClassifier_Default_Weka_AtomlTest.java:196)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.063">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 12 violations expected:&lt;0&gt; but was:&lt;12&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Const_UNIFORM(MLPClassifier_Default_Weka_AtomlTest.java:108)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.704"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.155"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.165"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="13.933">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.convertInstance(NominalToBinary.java:581)&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.input(NominalToBinary.java:184)&#13;
	at weka.filters.Filter.useFilter(Filter.java:702)&#13;
	at weka.classifiers.functions.MLPModel.initializeClassifier(MLPModel.java:251)&#13;
	at weka.classifiers.functions.MLPClassifier.initializeClassifier(MLPClassifier.java:124)&#13;
	at weka.classifiers.functions.MLPModel.buildClassifier(MLPModel.java:289)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_ManyCategories(MLPClassifier_Default_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.022">
      <error>java.lang.Exception: A NaN value was generated while standardizing attribute feature_0&#13;
	at weka.filters.unsupervised.attribute.Standardize.convertInstance(Standardize.java:247)&#13;
	at weka.filters.unsupervised.attribute.Standardize.batchFinished(Standardize.java:169)&#13;
	at weka.filters.Filter.useFilter(Filter.java:704)&#13;
	at weka.classifiers.functions.MLPClassifier.initializeClassifier(MLPClassifier.java:136)&#13;
	at weka.classifiers.functions.MLPModel.buildClassifier(MLPModel.java:289)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_MaxDouble(MLPClassifier_Default_Weka_AtomlTest.java:2411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.19"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.222"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.749"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.907">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 61 violations expected:&lt;0&gt; but was:&lt;61&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_CREDITG(MLPClassifier_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.474">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_IONOSPHERE(MLPClassifier_Default_Weka_AtomlTest.java:460)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.291">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_RANDCAT(MLPClassifier_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.056">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 38 violations expected:&lt;0&gt; but was:&lt;38&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_RANDNUM(MLPClassifier_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.473">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_UNBALANCE(MLPClassifier_Default_Weka_AtomlTest.java:504)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.109">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 15 violations expected:&lt;0&gt; but was:&lt;15&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_UNIFORM(MLPClassifier_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Opposite_WEATHERNUMERIC(MLPClassifier_Default_Weka_AtomlTest.java:592)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.095"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.164"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.141"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.71"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="2.338"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.278"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.687"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.269"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.524"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.287"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.322">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(MLPClassifier_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.694">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 78 violations expected:&lt;0&gt; but was:&lt;78&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_CREDITG(MLPClassifier_Default_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.274">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(MLPClassifier_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.954">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_RANDCAT(MLPClassifier_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.053">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 17 violations expected:&lt;0&gt; but was:&lt;17&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_RANDNUM(MLPClassifier_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.311">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 11 violations expected:&lt;0&gt; but was:&lt;11&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_UNBALANCE(MLPClassifier_Default_Weka_AtomlTest.java:1296)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.162">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Reorder_UNIFORM(MLPClassifier_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.696"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="2.379"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.276"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.964"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.292"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.568"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.268"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.631"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="1.713">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 88 violations expected:&lt;0&gt; but was:&lt;88&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_CREDITG(MLPClassifier_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.4">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(MLPClassifier_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.914">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_RANDCAT(MLPClassifier_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.066">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 24 violations expected:&lt;0&gt; but was:&lt;24&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_RANDNUM(MLPClassifier_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.526">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_UNBALANCE(MLPClassifier_Default_Weka_AtomlTest.java:900)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.056">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 11 violations expected:&lt;0&gt; but was:&lt;11&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_UNIFORM(MLPClassifier_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.026">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(MLPClassifier_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.MLPClassifier_Default_Weka_AtomlTest" time="0.063"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="66.885">
    <testcase name="test_Bias" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="60.695"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="1.121">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.sortWithNoMissingValues(Utils.java:1535)&#13;
	at weka.core.Instances.sort(Instances.java:1623)&#13;
	at weka.core.Instances.sort(Instances.java:1643)&#13;
	at weka.classifiers.trees.j48.C45Split.buildClassifier(C45Split.java:118)&#13;
	at weka.classifiers.trees.j48.C45ModelSelection.selectModel(C45ModelSelection.java:139)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:167)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
	at weka.classifiers.trees.j48.C45PruneableClassifierTree.getNewTree(C45PruneableClassifierTree.java:210)&#13;
	at weka.classifiers.trees.j48.ClassifierTree.buildTree(ClassifierTree.java:173)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.095">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(J48_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.074">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Opposite_CREDITG(J48_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.022">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Opposite_RANDCAT(J48_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.045">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(J48_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.096">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Reorder_RANDNUM(J48_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.022">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.J48_Default_Weka_AtomlTest.test_Reorder_UNIFORM(J48_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.082"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.104"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.053"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.J48_Default_Weka_AtomlTest" time="0.052"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="15.071">
    <testcase name="test_Bias" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.231"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.147"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.213"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.093"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="6.616"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.157"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.162"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.184"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.211"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.147"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.15"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.104"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.151"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.154"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.276"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.153"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.066">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.ADTree_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(ADTree_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.161"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.213"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.179"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.233"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.199"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.172"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.328"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.158"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.138"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.14"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.251"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.173"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.234"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.153"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.ADTree_Default_Weka_AtomlTest" time="0.056"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="75.8">
    <testcase name="test_Bias" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.161"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="69.605"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.708">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.sortWithNoMissingValues(Utils.java:1535)&#13;
	at weka.core.Instances.sort(Instances.java:1623)&#13;
	at weka.core.Instances.sort(Instances.java:1643)&#13;
	at weka.classifiers.trees.j48.C45Split.buildClassifier(C45Split.java:118)&#13;
	at weka.classifiers.trees.j48.C45ModelSelection.selectModel(C45ModelSelection.java:139)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:89)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.getNewDecList(C45PruneableDecList.java:155)&#13;
	at weka.classifiers.rules.part.C45PruneableDecList.buildDecList(C45PruneableDecList.java:117)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.067">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.PART_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(PART_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.143"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.136"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.085">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.PART_Default_Weka_AtomlTest.test_Reorder_UNBALANCE(PART_Default_Weka_AtomlTest.java:1296)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 11 violations expected:&lt;0&gt; but was:&lt;11&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.PART_Default_Weka_AtomlTest.test_Reorder_UNIFORM(PART_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.151"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.077"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Split" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.PART_Default_Weka_AtomlTest" time="0.058"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="21.117">
    <testcase name="test_Bias" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.102">
      <error>java.lang.IllegalArgumentException: Can't normalize array. Sum is NaN.&#13;
	at weka.core.Utils.normalize(Utils.java:1327)&#13;
	at weka.core.Utils.logs2probs(Utils.java:1357)&#13;
	at weka.filters.unsupervised.attribute.ClusterMembership.convertInstance(ClusterMembership.java:360)&#13;
	at weka.filters.unsupervised.attribute.ClusterMembership.batchFinished(ClusterMembership.java:273)&#13;
	at weka.filters.Filter.useFilter(Filter.java:704)&#13;
	at weka.classifiers.functions.RBFNetwork.buildClassifier(RBFNetwork.java:203)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Bias(RBFNetwork_Default_Weka_AtomlTest.java:2581)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.237"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.18"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.197"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.175"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.193"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.136"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="14.015"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.024">
      <error>java.lang.Exception: A NaN value was generated while standardizing attribute feature_0&#13;
	at weka.filters.unsupervised.attribute.Standardize.convertInstance(Standardize.java:247)&#13;
	at weka.filters.unsupervised.attribute.Standardize.batchFinished(Standardize.java:169)&#13;
	at weka.filters.Filter.useFilter(Filter.java:704)&#13;
	at weka.classifiers.functions.RBFNetwork.buildClassifier(RBFNetwork.java:192)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_MaxDouble(RBFNetwork_Default_Weka_AtomlTest.java:2411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.174"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.157"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.186"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.306"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.036"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.146"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.141"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.14"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.156"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.176"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.217"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.154"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.025">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(RBFNetwork_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.083">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 104 violations expected:&lt;0&gt; but was:&lt;104&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_CREDITG(RBFNetwork_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.055">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 15 violations expected:&lt;0&gt; but was:&lt;15&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(RBFNetwork_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_RANDCAT(RBFNetwork_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_RANDNUM(RBFNetwork_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 29 violations expected:&lt;0&gt; but was:&lt;29&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest.test_Scramble_UNIFORM(RBFNetwork_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.RBFNetwork_Default_Weka_AtomlTest" time="0.059"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="36.788">
    <testcase name="test_Bias" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.152"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="31.124"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="1.107"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.093"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.146"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(ConjunctiveRule_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.037"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.039"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.095"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.034"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.036">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 20 violations expected:&lt;0&gt; but was:&lt;20&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(ConjunctiveRule_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 17 violations expected:&lt;0&gt; but was:&lt;17&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_RANDCAT(ConjunctiveRule_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 72 violations expected:&lt;0&gt; but was:&lt;72&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_RANDNUM(ConjunctiveRule_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 24 violations expected:&lt;0&gt; but was:&lt;24&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_UNIFORM(ConjunctiveRule_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(ConjunctiveRule_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.018">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(ConjunctiveRule_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.053"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.ConjunctiveRule_Default_Weka_AtomlTest" time="0.057"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="24.451">
    <testcase name="test_Bias" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.183"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.219"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.188"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.167"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="12.755">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.convertInstance(NominalToBinary.java:581)&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.input(NominalToBinary.java:184)&#13;
	at weka.filters.Filter.useFilter(Filter.java:702)&#13;
	at weka.classifiers.functions.SPegasos.buildClassifier(SPegasos.java:486)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_ManyCategories(SPegasus_Default_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.191"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.412"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.438"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.406"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.202"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.196"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.194"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.03"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.39"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.516"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.431"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.181"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.143"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.277"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.322"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.294"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.141"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.143"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.296"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.337"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.289"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.313"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.327">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 60 violations expected:&lt;0&gt; but was:&lt;60&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_Scramble_CREDITG(SPegasus_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.091">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 40 violations expected:&lt;0&gt; but was:&lt;40&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(SPegasus_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.281"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.031">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 9 violations expected:&lt;0&gt; but was:&lt;9&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_Scramble_RANDNUM(SPegasus_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.155"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.031">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_Scramble_UNIFORM(SPegasus_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.022">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(SPegasus_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.976"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.082"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.SPegasus_Default_Weka_AtomlTest" time="0.073"/>
  </testsuite>
  <testsuite name="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="7.611">
    <testcase name="test_Bias" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.026">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest.test_Const_RANDNUM(NaiveBayes_Default_Weka_AtomlTest.java:64)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.089">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 9 violations expected:&lt;0&gt; but was:&lt;9&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest.test_Const_UNBALANCE(NaiveBayes_Default_Weka_AtomlTest.java:196)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.041">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest.test_Const_UNIFORM(NaiveBayes_Default_Weka_AtomlTest.java:108)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.093"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="2.322"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.032">
      <error>java.lang.Exception: NaN returned from estimator for attribute feature_7:
Normal Distribution. Mean = Infinity StandardDev = 300347906841430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 WeightSum = 55 Precision = 1.80208744104858E306
&#13;
	at weka.classifiers.bayes.NaiveBayes.distributionForInstance(NaiveBayes.java:367)&#13;
	at weka.classifiers.AbstractClassifier.classifyInstance(AbstractClassifier.java:173)&#13;
	at weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest.test_MaxDouble(NaiveBayes_Default_Weka_AtomlTest.java:2413)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_OneClass" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.053"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.151"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Outlier" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.14"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Split" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_Uniform" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.077"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.bayes.NaiveBayes_Default_Weka_AtomlTest" time="0.063"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="136.372">
    <testcase name="test_Bias" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.077"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.259"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.194"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="130.034"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.692"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.531">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(Ridor_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.084">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 90 violations expected:&lt;0&gt; but was:&lt;90&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_CREDITG(Ridor_Default_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.051">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 22 violations expected:&lt;0&gt; but was:&lt;22&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(Ridor_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.069">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_RANDCAT(Ridor_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.022">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 48 violations expected:&lt;0&gt; but was:&lt;48&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_RANDNUM(Ridor_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_UNIFORM(Ridor_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.018">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_WEATHERNOMINAL(Ridor_Default_Weka_AtomlTest.java:1340)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Reorder_WEATHERNUMERIC(Ridor_Default_Weka_AtomlTest.java:1384)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.298"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 12 violations expected:&lt;0&gt; but was:&lt;12&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(Ridor_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.085">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 44 violations expected:&lt;0&gt; but was:&lt;44&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_CREDITG(Ridor_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.051">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 21 violations expected:&lt;0&gt; but was:&lt;21&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(Ridor_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_RANDCAT(Ridor_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.026">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 31 violations expected:&lt;0&gt; but was:&lt;31&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_RANDNUM(Ridor_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.025">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_UNIFORM(Ridor_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(Ridor_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.Ridor_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(Ridor_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.Ridor_Default_Weka_AtomlTest" time="0.057"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="8.332">
    <testcase name="test_Bias" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.343"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="2.188"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.138"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.118">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 14 violations expected:&lt;0&gt; but was:&lt;14&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(OneR_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.045">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Opposite_CREDITG(OneR_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.147"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.146"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.41"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.038"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.041"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.159"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.138"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.039"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.058">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 50 violations expected:&lt;0&gt; but was:&lt;50&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Reorder_RANDCAT(OneR_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.043">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 44 violations expected:&lt;0&gt; but was:&lt;44&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Reorder_UNIFORM(OneR_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.025">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Reorder_WEATHERNOMINAL(OneR_Default_Weka_AtomlTest.java:1340)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.03">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.OneR_Default_Weka_AtomlTest.test_Reorder_WEATHERNUMERIC(OneR_Default_Weka_AtomlTest.java:1384)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.077"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.397"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.136"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Split" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.OneR_Default_Weka_AtomlTest" time="0.054"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="26.541">
    <testcase name="test_Bias" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.143"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.47">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Const_RANDNUM(SVM_Poly_Weka_AtomlTest.java:64)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.221"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.225"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.392"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="11.764">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.convertInstance(NominalToBinary.java:581)&#13;
	at weka.filters.unsupervised.attribute.NominalToBinary.input(NominalToBinary.java:184)&#13;
	at weka.filters.Filter.useFilter(Filter.java:702)&#13;
	at weka.classifiers.functions.SMO.buildClassifier(SMO.java:1375)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_ManyCategories(SVM_Poly_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.175"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.146"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.516"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.874">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Opposite_CREDITG(SVM_Poly_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.36"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.161">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Opposite_RANDNUM(SVM_Poly_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.168"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.15">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Opposite_UNIFORM(SVM_Poly_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.051">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Opposite_WEATHERNUMERIC(SVM_Poly_Weka_AtomlTest.java:592)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.104"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.303"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.745"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.311"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.219"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.154"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.215"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.31"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.754">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Reorder_CREDITG(SVM_Poly_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.302"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.133">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Reorder_RANDNUM(SVM_Poly_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.229"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.039"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.494"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.73"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.31"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.225"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.161"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.227"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.038"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.304"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.764">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Scramble_CREDITG(SVM_Poly_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.333"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.131">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_Poly_Weka_AtomlTest.test_Scramble_RANDNUM(SVM_Poly_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.141"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.214"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.041"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.216"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.SVM_Poly_Weka_AtomlTest" time="0.111"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="25.823">
    <testcase name="test_Bias" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.295"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.431"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.224"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.297"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.232"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.263"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="9.175">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.494"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.755"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.196"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.281">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 66 violations expected:&lt;0&gt; but was:&lt;66&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Opposite_RANDCAT(SimpleLogistic_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.137">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 100 violations expected:&lt;0&gt; but was:&lt;100&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Opposite_RANDNUM(SimpleLogistic_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.288"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.217"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.474"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.763"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.198"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.434"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.239"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.298"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.229"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.489"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.748"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.214"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.428"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.209"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.315"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.24"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Reorder_WEATHERNOMINAL(SimpleLogistic_Default_Weka_AtomlTest.java:1340)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.03"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.494"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.733"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.186"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.446"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.225"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.306"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.22"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.097">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(SimpleLogistic_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.773">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 28 violations expected:&lt;0&gt; but was:&lt;28&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_CREDITG(SimpleLogistic_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.172">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 11 violations expected:&lt;0&gt; but was:&lt;11&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(SimpleLogistic_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.1">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_RANDCAT(SimpleLogistic_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.05">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 13 violations expected:&lt;0&gt; but was:&lt;13&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_RANDNUM(SimpleLogistic_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.302"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.048">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_UNIFORM(SimpleLogistic_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(SimpleLogistic_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(SimpleLogistic_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="1.089"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.SimpleLogistic_Default_Weka_AtomlTest" time="0.047"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="318.357">
    <testcase name="test_Bias" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.361">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 27 violations expected:&lt;0&gt; but was:&lt;27&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Const_IONOSPHERE(JRip_Default_Weka_AtomlTest.java:152)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.036">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Const_RANDNUM(JRip_Default_Weka_AtomlTest.java:64)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.15"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.034">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Const_UNIFORM(JRip_Default_Weka_AtomlTest.java:108)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="311.78"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.974"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.062">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 37 violations expected:&lt;0&gt; but was:&lt;37&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(JRip_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.165">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 195 violations expected:&lt;0&gt; but was:&lt;195&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_CREDITG(JRip_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.09">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 21 violations expected:&lt;0&gt; but was:&lt;21&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_IONOSPHERE(JRip_Default_Weka_AtomlTest.java:460)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 16 violations expected:&lt;0&gt; but was:&lt;16&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_RANDCAT(JRip_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.027">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 27 violations expected:&lt;0&gt; but was:&lt;27&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_RANDNUM(JRip_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.036">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 14 violations expected:&lt;0&gt; but was:&lt;14&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_UNIFORM(JRip_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Opposite_WEATHERNUMERIC(JRip_Default_Weka_AtomlTest.java:592)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.128"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.169"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.135"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.036">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(JRip_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.148">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 143 violations expected:&lt;0&gt; but was:&lt;143&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Reorder_CREDITG(JRip_Default_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.046">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 25 violations expected:&lt;0&gt; but was:&lt;25&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Reorder_RANDCAT(JRip_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.027">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 31 violations expected:&lt;0&gt; but was:&lt;31&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Reorder_RANDNUM(JRip_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.026">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 17 violations expected:&lt;0&gt; but was:&lt;17&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Reorder_UNIFORM(JRip_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.16"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.155"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.146"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.151"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.165"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.082">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 35 violations expected:&lt;0&gt; but was:&lt;35&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(JRip_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.115">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 129 violations expected:&lt;0&gt; but was:&lt;129&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_CREDITG(JRip_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.085">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(JRip_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_RANDCAT(JRip_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.025">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 36 violations expected:&lt;0&gt; but was:&lt;36&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_RANDNUM(JRip_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_UNIFORM(JRip_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.026">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.JRip_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(JRip_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.082"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.JRip_Default_Weka_AtomlTest" time="0.055"/>
  </testsuite>
  <testsuite name="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="21.664">
    <testcase name="test_Bias" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.084"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="1.279"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="10.164"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_OneClass" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.135"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.2"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="1.029"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.141"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Outlier" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.979"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.034"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.156"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="1.065"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.158"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.167"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.825"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.145"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.958"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.13"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Split" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Uniform" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.bayes.BayesNet_Default_Weka_AtomlTest" time="0.053"/>
  </testsuite>
  <testsuite name="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="4966.87">
    <testcase name="test_Bias" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.102"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.148"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.236"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="4959.705"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_OneClass" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.27"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.217"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Outlier" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.221"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.214"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.255"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.183"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.215"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.203"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.21"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.191"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Split" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_Uniform" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.lazy.IBk_Default_Weka_AtomlTest" time="0.07"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="5.915">
    <testcase name="test_Bias" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.033"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="1.774"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.095"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.093"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 10 violations expected:&lt;0&gt; but was:&lt;10&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest.test_Opposite_WEATHERNOMINAL(DecisionStump_Default_Weka_AtomlTest.java:548)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.017">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 10 violations expected:&lt;0&gt; but was:&lt;10&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest.test_Opposite_WEATHERNUMERIC(DecisionStump_Default_Weka_AtomlTest.java:592)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.033"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.102"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.DecisionStump_Default_Weka_AtomlTest" time="0.049"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="9.332">
    <testcase name="test_Bias" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.087"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="4.143"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.019">
      <error>java.lang.Exception: NaN returned from estimator for attribute feature_0:
Normal Distribution. Mean = Infinity StandardDev = 0.0017 WeightSum = 1 Precision = 0.01
&#13;
	at weka.classifiers.bayes.NaiveBayes.distributionForInstance(NaiveBayes.java:367)&#13;
	at weka.classifiers.AbstractClassifier.classifyInstance(AbstractClassifier.java:173)&#13;
	at weka.classifiers.trees.ht.NBNodeAdaptive.updateNode(NBNodeAdaptive.java:90)&#13;
	at weka.classifiers.trees.HoeffdingTree.updateClassifier(HoeffdingTree.java:781)&#13;
	at weka.classifiers.trees.HoeffdingTree.buildClassifier(HoeffdingTree.java:747)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_MaxDouble(HoeffdingTree_Default_Weka_AtomlTest.java:2411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.04">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 46 violations expected:&lt;0&gt; but was:&lt;46&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_Opposite_RANDCAT(HoeffdingTree_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.2"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.053"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.179"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.059">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 47 violations expected:&lt;0&gt; but was:&lt;47&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_Scramble_RANDCAT(HoeffdingTree_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.043">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 49 violations expected:&lt;0&gt; but was:&lt;49&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_Scramble_RANDNUM(HoeffdingTree_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.018">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(HoeffdingTree_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(HoeffdingTree_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.078"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.HoeffdingTree_Default_Weka_AtomlTest" time="0.065"/>
  </testsuite>
  <testsuite name="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="7.095">
    <testcase name="test_Bias" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.164"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="2.215"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_OneClass" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.014">
      <error>java.lang.IllegalArgumentException: Can't normalize array. Sum is NaN.&#13;
	at weka.core.Utils.normalize(Utils.java:1327)&#13;
	at weka.classifiers.misc.VFI.distributionForInstance(VFI.java:614)&#13;
	at weka.classifiers.AbstractClassifier.classifyInstance(AbstractClassifier.java:173)&#13;
	at weka.classifiers.misc.VFI_Default_Weka_AtomlTest.test_OneClass(VFI_Default_Weka_AtomlTest.java:2549)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.03"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Outlier" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.037"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.037"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.104"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.102"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.037"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.034"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.128"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.1"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Split" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Uniform" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.misc.VFI_Default_Weka_AtomlTest" time="0.134"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="13188.322">
    <testcase name="test_Bias" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="6.778"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.269"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.303"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.839"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="2.05"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.504"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.603"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="13109.162"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.01"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.719"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="4.692"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.168"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.224"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.275"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.71"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.978"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="2.995"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.743"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="4.697"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.211"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.227"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.28"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.709"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.072"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.728"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="4.332">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.NBTree_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(NBTree_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.197"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.232"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.28"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.197">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.NBTree_Default_Weka_AtomlTest.test_Reorder_UNIFORM(NBTree_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.521"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.042"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.737"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="4.626"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.273"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.225"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.274"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.713"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="2.436">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.NBTree_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(NBTree_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.731"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="5.006">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.NBTree_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(NBTree_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="3.175">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 5): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.NBTree_Default_Weka_AtomlTest.test_Scramble_RANDCAT(NBTree_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.221"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.278"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.752"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.354"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.823"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.47"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.138"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.NBTree_Default_Weka_AtomlTest" time="0.071"/>
  </testsuite>
  <testsuite name="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="4.801">
    <testcase name="test_Bias" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="1.327"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.084"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_OneClass" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 71 violations expected:&lt;0&gt; but was:&lt;71&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(HyperPipes_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.025">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 976 violations expected:&lt;0&gt; but was:&lt;976&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_CREDITG(HyperPipes_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.022">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 236 violations expected:&lt;0&gt; but was:&lt;236&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_IONOSPHERE(HyperPipes_Default_Weka_AtomlTest.java:460)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 87 violations expected:&lt;0&gt; but was:&lt;87&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_RANDCAT(HyperPipes_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.02">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 70 violations expected:&lt;0&gt; but was:&lt;70&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_RANDNUM(HyperPipes_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.033">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 104 violations expected:&lt;0&gt; but was:&lt;104&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_UNBALANCE(HyperPipes_Default_Weka_AtomlTest.java:504)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 50 violations expected:&lt;0&gt; but was:&lt;50&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_UNIFORM(HyperPipes_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 10 violations expected:&lt;0&gt; but was:&lt;10&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_WEATHERNOMINAL(HyperPipes_Default_Weka_AtomlTest.java:548)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.017">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest.test_Opposite_WEATHERNUMERIC(HyperPipes_Default_Weka_AtomlTest.java:592)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Outlier" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.093"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.088"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.03"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Split" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.047"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Uniform" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.misc.HyperPipes_Default_Weka_AtomlTest" time="0.05"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="40.208">
    <testcase name="test_Bias" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.114"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.692"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.514"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.444"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.317"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.353"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.164"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.384"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="6.575">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="1.016">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.RelationalLocator.copyRelationalValues(RelationalLocator.java:89)&#13;
	at weka.filters.Filter.copyValues(Filter.java:405)&#13;
	at weka.filters.Filter.push(Filter.java:326)&#13;
	at weka.filters.supervised.attribute.NominalToBinary.convertInstanceNominal(NominalToBinary.java:681)&#13;
	at weka.filters.supervised.attribute.NominalToBinary.convertInstance(NominalToBinary.java:500)&#13;
	at weka.filters.supervised.attribute.NominalToBinary.input(NominalToBinary.java:220)&#13;
	at weka.classifiers.trees.lmt.LMTNode.modelDistributionForInstance(LMTNode.java:676)&#13;
	at weka.classifiers.trees.lmt.LMTNode.distributionForInstance(LMTNode.java:699)&#13;
	at weka.classifiers.evaluation.Evaluation.evaluationForSingleInstance(Evaluation.java:2192)&#13;
	at weka.classifiers.evaluation.Evaluation.evaluateModelOnceAndRecordPrediction(Evaluation.java:2230)&#13;
	at weka.classifiers.evaluation.Evaluation.evaluateModel(Evaluation.java:2106)&#13;
	at weka.classifiers.Evaluation.evaluateModel(Evaluation.java:689)&#13;
	at weka.classifiers.trees.lmt.LogisticBase.getErrorRate(LogisticBase.java:490)&#13;
	at weka.classifiers.trees.lmt.LogisticBase.performBoosting(LogisticBase.java:357)&#13;
	at weka.classifiers.trees.lmt.LogisticBase.performBoostingCV(LogisticBase.java:231)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:307)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
	at weka.classifiers.trees.lmt.LMTNode.buildTree(LMTNode.java:353)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.236"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.099"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.592"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="2.017"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.651"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.66">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 15 violations expected:&lt;0&gt; but was:&lt;15&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Opposite_RANDCAT(LMT_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.369">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 100 violations expected:&lt;0&gt; but was:&lt;100&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Opposite_RANDNUM(LMT_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="2.509"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.313"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.452"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.26"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.582"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="1.987"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.646"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.527"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.511"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.444"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.313"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.584">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 5): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(LMT_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="1.976"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.646"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.521"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.509"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.443"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.068">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Reorder_UNIFORM(LMT_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Reorder_WEATHERNOMINAL(LMT_Default_Weka_AtomlTest.java:1340)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.241"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.577"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="1.977"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.65"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.521"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.511"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.435"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.319"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.088">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(LMT_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="2.296">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 28 violations expected:&lt;0&gt; but was:&lt;28&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_CREDITG(LMT_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.538">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(LMT_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.155">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_RANDCAT(LMT_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.049">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 13 violations expected:&lt;0&gt; but was:&lt;13&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_RANDNUM(LMT_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.44"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.065">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_UNIFORM(LMT_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(LMT_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.035">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.LMT_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(LMT_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.443"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="1.058"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.403"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.LMT_Default_Weka_AtomlTest" time="0.062"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="21651.79">
    <testcase name="test_Bias" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.102"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.424"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.178"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.215"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.14"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.81"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="21606.501">
      <error>org.junit.runners.model.TestTimedOutException: test timed out after 21600000 milliseconds&#13;
	at java.util.Arrays.copyOf(Unknown Source)&#13;
	at java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)&#13;
	at java.lang.AbstractStringBuilder.append(Unknown Source)&#13;
	at java.lang.StringBuilder.append(Unknown Source)&#13;
	at weka.classifiers.trees.SimpleCart.nominalDistribution(SimpleCart.java:871)&#13;
	at weka.classifiers.trees.SimpleCart.makeTree(SimpleCart.java:408)&#13;
	at weka.classifiers.trees.SimpleCart.buildClassifier(SimpleCart.java:284)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_ManyCategories(SimpleCart_Default_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="7.865">
      <error>java.lang.NullPointerException&#13;
	at weka.core.AbstractInstance.isMissing(AbstractInstance.java:351)&#13;
	at weka.classifiers.trees.SimpleCart.distributionForInstance(SimpleCart.java:1457)&#13;
	at weka.classifiers.AbstractClassifier.classifyInstance(AbstractClassifier.java:173)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_MaxDouble(SimpleCart_Default_Weka_AtomlTest.java:2413)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="1.123"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="7.136"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.15"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.482"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="4.675"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.188"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.09"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.525"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="2.993"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.509"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="1.451"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.233"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.162"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="1.019">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(SimpleCart_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="1.569"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.892">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Reorder_RANDCAT(SimpleCart_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.947">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 9 violations expected:&lt;0&gt; but was:&lt;9&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Reorder_RANDNUM(SimpleCart_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.24"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.899">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Reorder_UNIFORM(SimpleCart_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.085"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.499"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="1.021"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.812"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.184"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.242"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.173"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.384">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 43 violations expected:&lt;0&gt; but was:&lt;43&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(SimpleCart_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.766">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 42 violations expected:&lt;0&gt; but was:&lt;42&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_CREDITG(SimpleCart_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.364">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 31 violations expected:&lt;0&gt; but was:&lt;31&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(SimpleCart_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.367">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_RANDCAT(SimpleCart_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.309">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 44 violations expected:&lt;0&gt; but was:&lt;44&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_RANDNUM(SimpleCart_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.247"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.063">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 9 violations expected:&lt;0&gt; but was:&lt;9&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_UNIFORM(SimpleCart_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.264">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(SimpleCart_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.358">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(SimpleCart_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="2.283"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.SimpleCart_Default_Weka_AtomlTest" time="0.049"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="19.327">
    <testcase name="test_Bias" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.128"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.192"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.179"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="10.504">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.028">
      <error>java.lang.Exception: Objective function value is NaN!&#13;
	at weka.core.Optimization.findArgmin(Optimization.java:918)&#13;
	at weka.classifiers.functions.Logistic.buildClassifier(Logistic.java:840)&#13;
	at weka.classifiers.functions.Logistic_Default_Weka_AtomlTest.test_MaxDouble(Logistic_Default_Weka_AtomlTest.java:2411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.361"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.257"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.312"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.223"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.323"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.2"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.279"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.201"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.304"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.212"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.281"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.191"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.311"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.204"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.28"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.2"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.32"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.209"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.304"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.193"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.053"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.064"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.Logistic_Default_Weka_AtomlTest" time="0.053"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="21648.348">
    <testcase name="test_Bias" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.494"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.169"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.244"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.161"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="1.031"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="21601.458">
      <error>org.junit.runners.model.TestTimedOutException: test timed out after 21600000 milliseconds&#13;
	at weka.classifiers.trees.BFTree.nominalDistribution(BFTree.java:1643)&#13;
	at weka.classifiers.trees.BFTree.computeSplitInfo(BFTree.java:1345)&#13;
	at weka.classifiers.trees.BFTree.buildClassifier(BFTree.java:429)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_ManyCategories(BFTree_Default_Weka_AtomlTest.java:2819)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.098"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="4.08">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 13 violations expected:&lt;0&gt; but was:&lt;13&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(BFTree_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="7.626">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Opposite_CREDITG(BFTree_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.15"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.627"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="2.388">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Opposite_RANDNUM(BFTree_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="3.293"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="2.058">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Opposite_UNIFORM(BFTree_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="2.021">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Opposite_WEATHERNOMINAL(BFTree_Default_Weka_AtomlTest.java:548)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.15"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.106"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.561"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="3.936"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.156"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.523"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.649"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.272"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.195"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.544">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_CATEGORICAL(BFTree_Default_Weka_AtomlTest.java:1164)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="1.832">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_CREDITG(BFTree_Default_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.572">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 16 violations expected:&lt;0&gt; but was:&lt;16&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(BFTree_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.664">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_RANDCAT(BFTree_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.744">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_RANDNUM(BFTree_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.269"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.34">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_UNIFORM(BFTree_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.689">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Reorder_WEATHERNOMINAL(BFTree_Default_Weka_AtomlTest.java:1340)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.083"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.589"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="1.157"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.153"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.913"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.193"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.279"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.184"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.16">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 49 violations expected:&lt;0&gt; but was:&lt;49&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(BFTree_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="1.128">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 20 violations expected:&lt;0&gt; but was:&lt;20&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_CREDITG(BFTree_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.159"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.308">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 23 violations expected:&lt;0&gt; but was:&lt;23&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_RANDCAT(BFTree_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.244">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_RANDNUM(BFTree_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.267"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.068">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_UNIFORM(BFTree_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.217">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(BFTree_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.224">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.BFTree_Default_Weka_AtomlTest.test_Scramble_WEATHERNUMERIC(BFTree_Default_Weka_AtomlTest.java:988)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Split" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.14"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="2.486"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.BFTree_Default_Weka_AtomlTest" time="0.065"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="338.14">
    <testcase name="test_Bias" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.174"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.305"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.135"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.086"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="332.879"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.084">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.sortWithNoMissingValues(Utils.java:1535)&#13;
	at weka.core.Instances.sort(Instances.java:1623)&#13;
	at weka.classifiers.trees.RandomTree$Tree.distribution(RandomTree.java:1868)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1490)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.028"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.031"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.131"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.042"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.124"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.125"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.076"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.RandomTree_Default_Weka_AtomlTest" time="0.054"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="32.186">
    <testcase name="test_Bias" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.533"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.022"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.872"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.206"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.446"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.283"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.295"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.239"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="8.23">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.28"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.193"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.191"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.203"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.087">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Opposite_CATEGORICAL(SVM_RBF_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.495">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 4 violations expected:&lt;0&gt; but was:&lt;4&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Opposite_CREDITG(SVM_RBF_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.183"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.243">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 9 violations expected:&lt;0&gt; but was:&lt;9&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Opposite_RANDCAT(SVM_RBF_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.08">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 40 violations expected:&lt;0&gt; but was:&lt;40&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Opposite_RANDNUM(SVM_RBF_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.181"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.351"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.193"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.19"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.184"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.395"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.371"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.197"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.391"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.357"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.379"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.385"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.422">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Reorder_CREDITG(SVM_RBF_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.243">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 1 violations expected:&lt;0&gt; but was:&lt;1&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Reorder_IONOSPHERE(SVM_RBF_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.386"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.338"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.171"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.41"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.195"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.387"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.348"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.192"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.413"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.362"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.194"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.356"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.417">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 5): 28 violations expected:&lt;0&gt; but was:&lt;28&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Scramble_CATEGORICAL(SVM_RBF_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="1.364">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Scramble_CREDITG(SVM_RBF_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.211"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.251">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 3): 48 violations expected:&lt;0&gt; but was:&lt;48&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Scramble_RANDCAT(SVM_RBF_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.401">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 5): 15 violations expected:&lt;0&gt; but was:&lt;15&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.SVM_RBF_Weka_AtomlTest.test_Scramble_RANDNUM(SVM_RBF_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.395"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.206"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.189"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.658"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.17"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.189"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.186"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.SVM_RBF_Weka_AtomlTest" time="0.2"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="346.63">
    <testcase name="test_Bias" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.359"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.685"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.292"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.269"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.276"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.175"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="324.404"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.196"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.153"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.144"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.134"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="1.228">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 42 violations expected:&lt;0&gt; but was:&lt;42&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(DecisionTable_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="1.53">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 24 violations expected:&lt;0&gt; but was:&lt;24&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Opposite_CREDITG(DecisionTable_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="1.405">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 31 violations expected:&lt;0&gt; but was:&lt;31&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Opposite_IONOSPHERE(DecisionTable_Default_Weka_AtomlTest.java:460)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="1.537">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 47 violations expected:&lt;0&gt; but was:&lt;47&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Opposite_RANDCAT(DecisionTable_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.237"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.313"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.983">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Opposite_UNIFORM(DecisionTable_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.139"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.142"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.232"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.402"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.582"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.256"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.251"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.309"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.275"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.277"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.392"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.186"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.272"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.239"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.26"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.256"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.039"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.265"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.354"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.194"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.722"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.239"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.245"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.248"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.625">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(DecisionTable_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.853">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 13 violations expected:&lt;0&gt; but was:&lt;13&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Scramble_CREDITG(DecisionTable_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.744">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(DecisionTable_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.595">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 37 violations expected:&lt;0&gt; but was:&lt;37&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest.test_Scramble_RANDCAT(DecisionTable_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.251"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.274"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.247"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.044"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.036"/>
    <testcase name="test_Split" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.157"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.129"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.DecisionTable_Default_Weka_AtomlTest" time="0.109"/>
  </testsuite>
  <testsuite name="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="17.292">
    <testcase name="test_Bias" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.563"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.707">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 34 violations expected:&lt;0&gt; but was:&lt;34&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Const_IONOSPHERE(VotedPerceptron_Default_Weka_AtomlTest.java:152)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.574">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 29 violations expected:&lt;0&gt; but was:&lt;29&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Const_RANDNUM(VotedPerceptron_Default_Weka_AtomlTest.java:64)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.752">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 42 violations expected:&lt;0&gt; but was:&lt;42&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Const_UNIFORM(VotedPerceptron_Default_Weka_AtomlTest.java:108)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="9.943">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.11"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_OneClass" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.036">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(VotedPerceptron_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.247"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.04">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 12 violations expected:&lt;0&gt; but was:&lt;12&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_IONOSPHERE(VotedPerceptron_Default_Weka_AtomlTest.java:460)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.034">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 18 violations expected:&lt;0&gt; but was:&lt;18&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_RANDCAT(VotedPerceptron_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.042">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 34 violations expected:&lt;0&gt; but was:&lt;34&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_RANDNUM(VotedPerceptron_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.031">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 30 violations expected:&lt;0&gt; but was:&lt;30&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_UNIFORM(VotedPerceptron_Default_Weka_AtomlTest.java:284)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.034">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 6 violations expected:&lt;0&gt; but was:&lt;6&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Opposite_WEATHERNOMINAL(VotedPerceptron_Default_Weka_AtomlTest.java:548)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Outlier" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.101"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.209"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.03"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.108"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.016"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.103"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.205"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.113"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.034"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.016"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.068"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.123"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.21"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.112"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.092"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.039"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.017"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.031">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 33 violations expected:&lt;0&gt; but was:&lt;33&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(VotedPerceptron_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.198"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.037">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 19 violations expected:&lt;0&gt; but was:&lt;19&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(VotedPerceptron_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.04">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 39 violations expected:&lt;0&gt; but was:&lt;39&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_RANDCAT(VotedPerceptron_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 41 violations expected:&lt;0&gt; but was:&lt;41&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_RANDNUM(VotedPerceptron_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.041"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 28 violations expected:&lt;0&gt; but was:&lt;28&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_UNIFORM(VotedPerceptron_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.028">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 2 violations expected:&lt;0&gt; but was:&lt;2&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest.test_Scramble_WEATHERNOMINAL(VotedPerceptron_Default_Weka_AtomlTest.java:944)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Split" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.062"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.072"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.167"/>
    <testcase name="test_Uniform" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.075"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.functions.VotedPerceptron_Default_Weka_AtomlTest" time="0.061"/>
  </testsuite>
  <testsuite name="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="6.365">
    <testcase name="test_Bias" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.065"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.034"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.052"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.051"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="1.758"/>
    <testcase name="test_MaxDouble" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.107"/>
    <testcase name="test_MaxFloat" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.079"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.056"/>
    <testcase name="test_OneClass" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.066"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.036"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.128"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.119"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.117"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Outlier" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.057"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.074"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.121"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.035"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.115"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.12"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.025"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.126"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.032"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.096"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.036"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.04"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.027"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.118"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.037"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.116"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.026"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.029"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.122"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Split" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.073"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Uniform" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.06"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.059"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.rules.ZeroR_Default_Weka_AtomlTest" time="0.059"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="12.845">
    <testcase name="test_Bias" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.19"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.097"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.185"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.094"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.081"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="7.83">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.179">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.AbstractInstance.isMissing(AbstractInstance.java:319)&#13;
	at weka.classifiers.trees.REPTree$Tree.splitData(REPTree.java:812)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:679)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
	at weka.classifiers.trees.REPTree$Tree.buildTree(REPTree.java:690)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.149"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.136"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.091"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.071"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.055">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 10 violations expected:&lt;0&gt; but was:&lt;10&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Opposite_CATEGORICAL(REPTree_Default_Weka_AtomlTest.java:372)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.061">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 20 violations expected:&lt;0&gt; but was:&lt;20&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Opposite_CREDITG(REPTree_Default_Weka_AtomlTest.java:416)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.05">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 45 violations expected:&lt;0&gt; but was:&lt;45&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Opposite_RANDCAT(REPTree_Default_Weka_AtomlTest.java:328)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.05">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 10 violations expected:&lt;0&gt; but was:&lt;10&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Opposite_RANDNUM(REPTree_Default_Weka_AtomlTest.java:240)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.022"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.018"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.069"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.067"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.109"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.137"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.105"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.046"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.128"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.023"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.132"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.05">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Reorder_CREDITG(REPTree_Default_Weka_AtomlTest.java:1208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.035">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 21 violations expected:&lt;0&gt; but was:&lt;21&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Reorder_IONOSPHERE(REPTree_Default_Weka_AtomlTest.java:1252)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.099">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 4): 3 violations expected:&lt;0&gt; but was:&lt;3&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Reorder_RANDCAT(REPTree_Default_Weka_AtomlTest.java:1120)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.031">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 8 violations expected:&lt;0&gt; but was:&lt;8&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Reorder_RANDNUM(REPTree_Default_Weka_AtomlTest.java:1032)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.043"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.044">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 5 violations expected:&lt;0&gt; but was:&lt;5&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Reorder_UNIFORM(REPTree_Default_Weka_AtomlTest.java:1076)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.021"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.061"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.133"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.038"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.033"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.127"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.102"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.111"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.024"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.052">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 2): 60 violations expected:&lt;0&gt; but was:&lt;60&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_CATEGORICAL(REPTree_Default_Weka_AtomlTest.java:768)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.06">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 147 violations expected:&lt;0&gt; but was:&lt;147&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_CREDITG(REPTree_Default_Weka_AtomlTest.java:812)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.045">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_IONOSPHERE(REPTree_Default_Weka_AtomlTest.java:856)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.029">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 55 violations expected:&lt;0&gt; but was:&lt;55&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_RANDCAT(REPTree_Default_Weka_AtomlTest.java:724)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.023">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 42 violations expected:&lt;0&gt; but was:&lt;42&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_RANDNUM(REPTree_Default_Weka_AtomlTest.java:636)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.07"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.024">
      <failure>java.lang.AssertionError: metamorphic relation broken (iteration 1): 7 violations expected:&lt;0&gt; but was:&lt;7&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at weka.classifiers.trees.REPTree_Default_Weka_AtomlTest.test_Scramble_UNIFORM(REPTree_Default_Weka_AtomlTest.java:680)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.019"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.02"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.08"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.089"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.063"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.REPTree_Default_Weka_AtomlTest" time="0.082"/>
  </testsuite>
  <testsuite name="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="150.225">
    <testcase name="test_Bias" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.233"/>
    <testcase name="test_Const_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.403"/>
    <testcase name="test_Const_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.561"/>
    <testcase name="test_Const_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.567"/>
    <testcase name="test_Const_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.556"/>
    <testcase name="test_DisjointCategorical" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.283"/>
    <testcase name="test_DisjointNumeric" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.279"/>
    <testcase name="test_LeftSkew" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.312"/>
    <testcase name="test_ManyCategories" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="125.286">
      <error>java.lang.OutOfMemoryError: Java heap space&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxDouble" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.146">
      <error>java.lang.StackOverflowError&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1833)&#13;
	at weka.core.Utils.quickSort(Utils.java:1834)&#13;
	at weka.core.Utils.sortWithNoMissingValues(Utils.java:1535)&#13;
	at weka.core.Instances.sort(Instances.java:1623)&#13;
	at weka.classifiers.trees.RandomTree$Tree.distribution(RandomTree.java:1868)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1490)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
	at weka.classifiers.trees.RandomTree$Tree.buildTree(RandomTree.java:1531)&#13;
&#13;
</error>
    </testcase>
    <testcase name="test_MaxFloat" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.349"/>
    <testcase name="test_MinDouble" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.154"/>
    <testcase name="test_MinFloat" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.306"/>
    <testcase name="test_OneClass" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.155"/>
    <testcase name="test_Opposite_CATEGORICAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.415"/>
    <testcase name="test_Opposite_CREDITG" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.648"/>
    <testcase name="test_Opposite_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.388"/>
    <testcase name="test_Opposite_RANDCAT" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.443"/>
    <testcase name="test_Opposite_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.632"/>
    <testcase name="test_Opposite_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.455"/>
    <testcase name="test_Opposite_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.562"/>
    <testcase name="test_Opposite_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.054"/>
    <testcase name="test_Opposite_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Outlier" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.167"/>
    <testcase name="test_RandomCategorial" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.297"/>
    <testcase name="test_RandomNumeric" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.363"/>
    <testcase name="test_Rename_CATEGORICAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.5"/>
    <testcase name="test_Rename_CREDITG" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.724"/>
    <testcase name="test_Rename_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.357"/>
    <testcase name="test_Rename_RANDCAT" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.42"/>
    <testcase name="test_Rename_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.573"/>
    <testcase name="test_Rename_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.468"/>
    <testcase name="test_Rename_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.525"/>
    <testcase name="test_Rename_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.045"/>
    <testcase name="test_Rename_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Reorder_CATEGORICAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.414"/>
    <testcase name="test_Reorder_CREDITG" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.636"/>
    <testcase name="test_Reorder_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.356"/>
    <testcase name="test_Reorder_RANDCAT" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.415"/>
    <testcase name="test_Reorder_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.597"/>
    <testcase name="test_Reorder_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.444"/>
    <testcase name="test_Reorder_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.555"/>
    <testcase name="test_Reorder_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Reorder_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.05"/>
    <testcase name="test_RightSkew" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.312"/>
    <testcase name="test_Same_CATEGORICAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.42"/>
    <testcase name="test_Same_CREDITG" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.66"/>
    <testcase name="test_Same_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.353"/>
    <testcase name="test_Same_RANDCAT" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.383"/>
    <testcase name="test_Same_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.597"/>
    <testcase name="test_Same_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.467"/>
    <testcase name="test_Same_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.532"/>
    <testcase name="test_Same_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.058"/>
    <testcase name="test_Same_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.048"/>
    <testcase name="test_Scramble_CATEGORICAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.379"/>
    <testcase name="test_Scramble_CREDITG" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.603"/>
    <testcase name="test_Scramble_IONOSPHERE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.318"/>
    <testcase name="test_Scramble_RANDCAT" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.378"/>
    <testcase name="test_Scramble_RANDNUM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.622"/>
    <testcase name="test_Scramble_UNBALANCE" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.456"/>
    <testcase name="test_Scramble_UNIFORM" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.488"/>
    <testcase name="test_Scramble_WEATHERNOMINAL" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.055"/>
    <testcase name="test_Scramble_WEATHERNUMERIC" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.049"/>
    <testcase name="test_Split" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.176"/>
    <testcase name="test_StarvedBinary" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.278"/>
    <testcase name="test_StarvedMany" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.189"/>
    <testcase name="test_Uniform" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.282"/>
    <testcase name="test_VeryLarge" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.342"/>
    <testcase name="test_VerySmall" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.166"/>
    <testcase name="test_Zeroes" classname="weka.classifiers.trees.RandomForest_Default_Weka_AtomlTest" time="0.18"/>
  </testsuite>
</testrun>
